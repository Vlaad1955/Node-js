{
  "swagger": "2.0",
  "info": {
    "description": "API documentation for user management and authentication",
    "version": "1.0.0",
    "title": "User Management and Auth API",
    "contact": {
      "email": "support@example.com"
    }
  },
  "host": "localhost:3000",
  "tags": [
    {
      "name": "user",
      "description": "Operations about users"
    },
    {
      "name": "auth",
      "description": "Authentication related operations"
    }
  ],
  "schemes": ["http"],
  "paths": {
    "/users/me": {
      "get": {
        "tags": ["user"],
        "summary": "Get me",
        "description": "This operation retrieves the details of the currently logged-in user.",
        "operationId": "getMyUser",
        "produces": ["application/json"],
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update me",
        "description": "This operation updates the details of the currently logged-in user.",
        "operationId": "updateMyUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          },
          "400": {
            "description": "Invalid user input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This operation deletes the currently logged-in user's account.",
        "operationId": "deleteUser",
        "security": [{"BearerAuth": []}],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This operation creates a new user account.",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/PrivateUserResponse"
            }
          },
          "400": {
            "description": "Invalid user input"
          }
        }
      }
    },
    "/auth/sign-up": {
      "post": {
        "tags": ["auth"],
        "summary": "Sign up",
        "description": "Registers a new user account.",
        "operationId": "signUp",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Details for signing up a new user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUpRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Email already exists"
          }
        }
      }
    },
    "/auth/password/forgot": {
      "post": {
        "tags": ["auth"],
        "summary": "Request password reset",
        "description": "Sends a password reset email with a token.",
        "operationId": "requestPasswordReset",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Email for password reset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reset email sent successfully"
          },
          "400": {
            "description": "Invalid email format"
          }
        }
      },
      "put": {
        "tags": ["auth"],
        "summary": "Reset password",
        "description": "Sets a new password using a reset token.",
        "operationId": "resetPassword",
        "consumes": ["application/json"],
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reset token and new password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Invalid token or password"
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": ["auth"],
        "summary": "Verify email",
        "description": "Verifies user's email using the provided token.",
        "operationId": "verifyEmail",
        "consumes": ["application/json"],
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Verification token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyTokenRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid token"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "definitions": {
    "SignUpRequest": {
      "type": "object",
      "required": ["name", "email", "password"],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "ForgotPasswordRequest": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "ResetPasswordRequest": {
      "type": "object",
      "required": ["token", "password"],
      "properties": {
        "token": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "VerifyTokenRequest": {
      "type": "object",
      "required": ["token"],
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "UpdateUserDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "age": {
          "type": "number"
        }
      }
    },
    "PrivateUserResponse": {
      "type": "object",
      "required": ["_id", "name", "email", "role"],
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["admin", "user"]
        },
        "phone": {
          "type": "string"
        },
        "age": {
          "type": "number"
        }
      }
    }
  }
}
